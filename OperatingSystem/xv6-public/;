#include "types.h"
#include "defs.h"
#include "param.h"
#include "memlayout.h"
#include "mmu.h"
#include "x86.h"
#include "proc.h"
#include "spinlock.h"
#include "stddef.h"
#include "pstat.h"

struct {
  struct spinlock lock;
  struct proc proc[NPROC];
} ptable;

/* PQueue */
struct proc *mlfq[3][NPROC];        
int head[3] = {0,0,0};          
int minpass = 0;
int sumOfShare = 0;
int strideSum = 0;
int index = 0;

int nextpid = 1;
extern void forkret(void);
extern void trapret(void);
static void wakeup1(void *chan);
static struct proc *initproc;

void
pinit(void)
{
  initlock(&ptable.lock, "ptable");
}

//PAGEBREAK: 32
// Look in the process table for an UNUSED proc.
// If found, change state to EMBRYO and initialize
// state required to run in the kernel.
// Otherwise return 0.
static struct proc*
allocproc(void)
{
  struct proc *p;
  char *sp;

  acquire(&ptable.lock);

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
    if(p->state == UNUSED)
      goto found;

  release(&ptable.lock);
  return 0;

found:
  p->state = EMBRYO;
  p->pid = nextpid++;

  /* insert process into PQueue*/
  release(&ptable.lock);

  // Allocate kernel stack.
  if((p->kstack = kalloc()) == 0){
    p->state = UNUSED;
    return 0;
  }
  sp = p->kstack + KSTACKSIZE;

  // Leave room for trap frame.
  sp -= sizeof *p->tf;
  p->tf = (struct trapframe*)sp;

  // Set up new context to start executing at forkret,
  // which returns to trapret.
  sp -= 4;
  *(uint*)sp = (uint)trapret;

  sp -= sizeof *p->context;
  p->context = (struct context*)sp;
  memset(p->context, 0, sizeof *p->context);
  p->context->eip = (uint)forkret;

  /* initialize p->priority,ticks,timeslice */
  p->prioritylevel = 0;                    
  p->ticks[0] = 0;
  p->ticks[1] = 0;
  p->ticks[2] = 0;

  p->wasRunInLastBoostCycle = 0;
  p->timeslice[0] = 0;
  p->timeslice[1] = 0;
  p->timeslice[2] = 0;

  p->share = 0;
  p->stride = 0;
  p->pvalue = 0;
  p->isStride = 0;

  return p;
}

//PAGEBREAK: 32
// Set up first user process.
void
userinit(void)
{
  struct proc *p;
  extern char _binary_initcode_start[], _binary_initcode_size[];

  schedMode = MLFQ;
  mlfq_Stride = 0;
  mlfq_PassValue = 0;
  checkingWhetherStrideOrNot = 0;

  p = allocproc();
  acquire(&ptable.lock);
  initproc = p;
  if((p->pgdir = setupkvm()) == 0)
    panic("userinit: out of memory?");
  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
  p->sz = PGSIZE;
  memset(p->tf, 0, sizeof(*p->tf));
  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
  p->tf->es = p->tf->ds;
  p->tf->ss = p->tf->ds;
  p->tf->eflags = FL_IF;
  p->tf->esp = PGSIZE;
  p->tf->eip = 0;  // beginning of initcode.S

  safestrcpy(p->name, "initcode", sizeof(p->name));
  p->cwd = namei("/");

  // this assignment to p->state lets other cores
  // run this process. the acquire forces the above
  // writes to be visible, and the lock is also needed
  // because the assignment might not be atomic.

  p->state = RUNNABLE;

  insertIntoPQueue(0,p);                 
  release(&ptable.lock);
}

// Grow current process's memory by n bytes.
// Return 0 on success, -1 on failure.
int
growproc(int n)
{
  uint sz;

  sz = proc->sz;
  if(n > 0){
    if((sz = allocuvm(proc->pgdir, sz, sz + n)) == 0)
      return -1;
  } else if(n < 0){
    if((sz = deallocuvm(proc->pgdir, sz, sz + n)) == 0)
      return -1;
  }
  proc->sz = sz;
  switchuvm(proc);
  return 0;
}

// Create a new process copying p as the parent.
// Sets up stack to return as if from system call.
// Caller must set state of returned proc to RUNNABLE.
int
fork(void)
{
  int i, pid;
  struct proc *np;

  // Allocate process.
  if((np = allocproc()) == 0){
    return -1;
  }

  // Copy process state from p.
  if((np->pgdir = copyuvm(proc->pgdir, proc->sz)) == 0){
    kfree(np->kstack);
    np->kstack = 0;
    np->state = UNUSED;
    return -1;
  }
  np->sz = proc->sz;
  np->parent = proc;
  *np->tf = *proc->tf;

  // Clear %eax so that fork returns 0 in the child.
  np->tf->eax = 0;

  for(i = 0; i < NOFILE; i++)
    if(proc->ofile[i])
      np->ofile[i] = filedup(proc->ofile[i]);
  np->cwd = idup(proc->cwd);

  safestrcpy(np->name, proc->name, sizeof(proc->name));

  pid = np->pid;

  np->state = RUNNABLE;
  np->isStride = 0;
  //insert proc into PQueue when fork() called
  insertIntoPQueue(np->prioritylevel , np);       

  return pid;
}

// Exit the current process.  Does not return.
// An exited process remains in the zombie state
// until its parent calls wait() to find out it exited.
void
exit(void)
{
  struct proc *p;
  int fd;

  if(proc == initproc)
    panic("init exiting");

  // Close all open files.
  for(fd = 0; fd < NOFILE; fd++){
    if(proc->ofile[fd]){
      fileclose(proc->ofile[fd]);
      proc->ofile[fd] = 0;
    }
  }

  begin_op();
  iput(proc->cwd);
  end_op();
  proc->cwd = 0;

  acquire(&ptable.lock);

  // Parent might be sleeping in wait().
  wakeup1(proc->parent);

  // Pass abandoned children to init.
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->parent == proc){
      p->parent = initproc;
      if(p->state == ZOMBIE)
        wakeup1(initproc);
    }
  }

  // Jump into the scheduler, never to return.
  proc->state = ZOMBIE;
  /* delete proc from PQueue */
  deleteFromQueue(proc->prioritylevel,proc);              
  sched();
  panic("zombie exit");
}

// Wait for a child process to exit and return its pid.
// Return -1 if this process has no children.
int
wait(void)
{
  struct proc *p;
  int havekids, pid;

  acquire(&ptable.lock);
  for(;;){
    // Scan through table looking for exited children.
    havekids = 0;
    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
      if(p->parent != proc)
        continue;
      havekids = 1;
      if(p->state == ZOMBIE){
        // Found one.
        pid = p->pid;
        kfree(p->kstack);
        p->kstack = 0;
        freevm(p->pgdir);
        p->pid = 0;
        p->parent = 0;
        p->name[0] = 0;
        p->killed = 0;
      
        if(p->stride != 0) {
            sumOfShare -= STRIDENUM/p->stride;
        }
        p->stride = 0;
        p->share = 0;
        p->pvalue = 0;



        p->state = UNUSED;
        release(&ptable.lock);
        return pid;
      }
    }

    // No point waiting if we don't have any children.
    if(!havekids || proc->killed){
      release(&ptable.lock);
      return -1;
    }

    // Wait for children to exit.  (See wakeup1 call in proc_exit.)
    sleep(proc, &ptable.lock);  //DOC: wait-sleep
  }
}

//PAGEBREAK: 42
// Per-CPU process scheduler.
// Each CPU calls scheduler() after setting itself up.
// Scheduler never returns.  It loops, doing:
//  - choose a process to run
//  - swtch to start running that process
//  - eventually that process transfers control
//      via swtch back to the scheduler.

/* return Highest priority process at same level */
struct proc *getHighPriorityProcForLevel(int plevel) { 
    struct proc *p;
    int i = 0;
    /* at level 0,1 */
    if(plevel < 2) {                    
        for(; i < NPROC ; i++) {
            p = mlfq[plevel][i];
            if(p != NULL) {
                if(p->state == RUNNABLE) {
                    if(p->isStride == 1) {
                        continue;
                        //deleteHeadFromPQueue(plevel);
                    }
                    p->wasRunInLastBoostCycle = 1;
                    return p;
                }
            }
        }
    }
    /* at level 2 */
    else {                              
        i = 0;
        for(; i < NPROC ; i++) {
            p = mlfq[plevel][i];
            if(p != NULL) {
                if(p->state == RUNNABLE) {
                    if(p->isStride == 1)
                        continue;
                    if(p->timeslice[2] == 20) {
                        p->ticks[2] = 0;
                        insertIntoPQueue(2,p);
                        deleteHeadFromPQueue(2);
                        p->timeslice[2] = 0;
                    }else {
                        p->wasRunInLastBoostCycle = 1;
                        return p;
                    }
                }
            }
            head[plevel] = (head[plevel]+1)%NPROC;
        }
    }
    return NULL;
}

/* return Highest priority process */
struct proc * getHighestPriorityProc() {       
    int plevel = 0;
    struct proc *p;
    for(; plevel < 3 ; plevel++){ 
        p = getHighPriorityProcForLevel(plevel);
        if(p != NULL) {
            return p;
        }
    }
    return NULL;
}

/* delete process in PQueue */
int deleteFromQueue(int plevel , struct proc *toDelete) {
    int i = 0;
    struct proc *p;
    for(; i < NPROC ; i++) {
        p = mlfq[plevel][i];
        if(p != NULL && p->pid == toDelete->pid) {
            mlfq[plevel][i] = NULL;
            return i;
        }
    }
    return -1;
}

/* delete head of PQueue */
void deleteHeadFromPQueue(int plevel) {            
    mlfq[plevel][head[plevel]] = NULL;
    head[plevel] = (head[plevel]+1)%NPROC;
}

/* reset Ticks */
void resetTicks(struct proc *p) {          
    p->timeslice[0] = 0;
    p->timeslice[1] = 0;
    p->timeslice[2] = 0;
}

/* priority boost */
void boostPriority(void) {                    
    cprintf("[do boosting!]\n");
    int i;
    struct proc *p = ptable.proc;
    int num = 0;
    for(i=0; i < NPROC ; i++) {
        if(p != NULL && p->state == RUNNABLE && p->wasRunInLastBoostCycle) {
            if(p->prioritylevel > 0) {
                deleteFromQueue(p->prioritylevel , p);
                p->prioritylevel = 0;
                insertIntoPQueue(p->prioritylevel , p);
            }
            resetTicks(p);
            num++;
        }else {
            p->wasRunInLastBoostCycle = 0;
        }
        p++;
    }
}

/* insert process into PQueue */
int insertIntoPQueue(int plevel , struct proc *p) {     
    int i = 0;
    for(; i < NPROC ; i++) {
        if(mlfq[plevel][i] == NULL) {
            mlfq[plevel][i] = p;
            return i;
        }
    }
    if(i == NPROC) {
        cprintf("Error: 65th Active process: %s\n" , p->name);
        return -1;
    }
    return i;
}

/* print proc table */
void printProcTable(uint ticksCountLocal) {
    int i = 0;
    struct proc *p = mlfq[0][0];
    int plevel = 0;
    for(; plevel < 3 ; plevel++) {
        for(i = 0 ; i < NPROC ; i++) {
            p = mlfq[plevel][i];
            if(p != NULL && p->state != UNUSED && p->pid > 2) {
                cprintf("%d\t %d\t %d\t ticks:%d,%d,%d\n" , ticksCountLocal , p->pid , p->prioritylevel , p->ticks[0] , p->ticks[1] , p->ticks[2]);
            }
        }
    }
}

void
scheduler(void)
{

    struct proc *p;
    /* get current ticks */
    uint prevTicksCount = getTicksCount();
    for(;;){
        // Enable interrupts on this processor.
        sti();
        acquire(&ptable.lock);
        if(schedMode == STRIDE) {
            cprintf("ENTERED INTO STRIDE IF LOOP\n");
            // Loop over process table looking for process to run.
            minpass = 10000000;
            sumOfShare = 0;
            strideSum = 0;
            index = 0;
            int i = 0;
            checkingWhetherStrideOrNot = 1;

            for(i = 0 ; i < NPROC ; i++) {
                if(ptable.proc[i].state != RUNNABLE) 
                    continue;
                if(ptable.proc[i].isStride == 1) {
                    p = &ptable.proc[i];
                    if(p->pvalue < minpass) {
                        minpass = p->pvalue;
                        index = i;
                    }
                    strideSum += p->stride;
                    if(p->stride != 0) {   
                        sumOfShare += (STRIDENUM/p->stride);
                    }
                }
            }
            
            if(strideSum == 0) {
                cprintf("sumOfStride = 0 !!!\n");
                mlfq_Stride = 0; 
                mlfq_PassValue = 0;
                schedMode = MLFQ;
                goto mlfq;
            }
            
            if(mlfq_PassValue < minpass) {
               // cprintf("sumOfShare = %d\n" , sumOfShare);
                mlfq_Stride = STRIDENUM/(100-sumOfShare);
                cprintf("mlfq's turn. goto mlfq\n");
                goto mlfq;
            }else {
                cprintf("stride's turn\n");
                p = &ptable.proc[index];
                proc = p;
                switchuvm(p);
                p->state = RUNNING;
                swtch(&cpu->scheduler , p->context);
                switchkvm();
                    
                p->pvalue += p->stride;
               // cprintf("stride done: passvalue = %d(%d)\n" , p->pvalue , p->stride);
               // cprintf("strideSum = %d\n" , strideSum);
                proc = 0;
            }
        }
        if(schedMode == MLFQ) {
            mlfq:
            int check = 0;

            checkingWhetherStrideOrNot = 0;
            uint ticksCountLocal = getTicksCount();
            
            if(ticksCountLocal % 1 == 0 && ticksCountLocal > prevTicksCount) {
                prevTicksCount = ticksCountLocal;
            }
            /* get highest priority process */
            p = getHighestPriorityProc();
            if(p == NULL) {
                release(&ptable.lock);
                continue;
            }
            if (p->isStride == 1){
                release(&ptable.lock);
                continue;
            }else {
                check = 1;
            }
            // Switch to chosen process.  It is the process's job
            // to release ptable.lock and then reacquire it
            // before jumping back to us.
            proc = p;
            switchuvm(p);
            p->state = RUNNING;
            swtch(&cpu->scheduler, p->context);
            switchkvm();
            // Process is done running for now.
            // It should have changed its p->state before coming back.
            proc = 0;
            mlfq_PassValue += mlfq_Stride;
            //cprintf("MLFQ if loop end\n");
            if(check == 0) {
                release(&ptable.lock);
            }
        }
        release(&ptable.lock);  
    }
}

// Enter scheduler.  Must hold only ptable.lock
// and have changed proc->state. Saves and restores
// intena because intena is a property of this
// kernel thread, not this CPU. It should
// be proc->intena and proc->ncli, but that would
// break in the few places where a lock is held but
// there's no process.
void
sched(void)
{
  int intena;

  if(!holding(&ptable.lock))
    panic("sched ptable.lock");
  if(cpu->ncli != 1)
    panic("sched locks");
  if(proc->state == RUNNING)
    panic("sched running");
  if(readeflags()&FL_IF)
    panic("sched interruptible");
  intena = cpu->intena;
  swtch(&proc->context, cpu->scheduler);
  cpu->intena = intena;
}

/* handle priority according to ticks */
void handlePriorityLevel(void) {
    proc->ticks[proc->prioritylevel]++;
    proc->timeslice[proc->prioritylevel]++;

    /* call boostpriority() */
    if(ticksCount == 100) {           
        boostPriority();
        ticksCount = 0;
    }

    /* demote */
    switch(proc->prioritylevel) {        
        case 0:
            if(proc->timeslice[proc->prioritylevel] == 5) {
                deleteFromQueue(proc->prioritylevel , proc);
                proc->prioritylevel++;
                proc->timeslice[proc->prioritylevel] = 0;
                insertIntoPQueue(proc->prioritylevel , proc);
            }/*
            else(proc->timeslice[proc->prioritylevel] < 5){
                insertIntoPQueue(proc->prioritylevel, proc);
            }*/
            break;
        case 1:
            if(proc->timeslice[proc->prioritylevel] == 10) {
                deleteFromQueue(proc->prioritylevel , proc);
                proc->prioritylevel++;
                proc->timeslice[proc->prioritylevel] = 0;
                insertIntoPQueue(proc->prioritylevel , proc);
            }
            break;
        default:
            /* at level 2 , RR scheduling until priority boost */
            if(proc->timeslice[proc->prioritylevel] == 20) {
                proc->timeslice[2] = 0;
                head[2] = (head[2]+1)%NPROC;
            }
            break;
    }
}
               
// Give up the CPU for one scheduling round.
void
yield(void)
{
  acquire(&ptable.lock);  //DOC: yieldlock
  proc->state = RUNNABLE;
  sched();
  release(&ptable.lock);
}

int
set_cpu_share(int share)
{   
    int i = 0;
    int totalShare = 0;
    for(i = 0 ; i < NPROC ; i++) {
        if(ptable.proc[i].isStride) {
            totalShare += ptable.proc[i].share;
        }
    }
    if(totalShare + share > 80) {
        /* CPU share failed */
        cprintf("total CPU share exceed!(%d+%d > 80%)\n" , totalShare , share);
        return -1;
    }else {
        /* CPU share */
        proc->share = share;
        if(proc->share != 0) {
            proc->stride = STRIDENUM/proc->share;
        }
        proc->pvalue = 0;
        proc->isStride = 1;
    }
    schedMode = STRIDE;
    return 0;
}
// A fork child's very first scheduling by scheduler()
// will swtch here.  "Return" to user space.
void
forkret(void)
{
  static int first = 1;
  // Still holding ptable.lock from scheduler.
  release(&ptable.lock);

  if (first) {
    // Some initialization functions must be run in the context
    // of a regular process (e.g., they call sleep), and thus cannot
    // be run from main().
    first = 0;
    iinit(ROOTDEV);
    initlog(ROOTDEV);
  }

  // Return to "caller", actually trapret (see allocproc).
}

// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
void
sleep(void *chan, struct spinlock *lk)
{
  if(proc == 0)
    panic("sleep");

  if(lk == 0)
    panic("sleep without lk");

  // Must acquire ptable.lock in order to
  // change p->state and then call sched.
  // Once we hold ptable.lock, we can be
  // guaranteed that we won't miss any wakeup
  // (wakeup runs with ptable.lock locked),
  // so it's okay to release lk.
  if(lk != &ptable.lock){  //DOC: sleeplock0
    acquire(&ptable.lock);  //DOC: sleeplock1
    release(lk);
  }

  // Go to sleep.
  proc->chan = chan;
  proc->state = SLEEPING;
  sched();

  // Tidy up.
  proc->chan = 0;

  // Reacquire original lock.
  if(lk != &ptable.lock){  //DOC: sleeplock2
    release(&ptable.lock);
    acquire(lk);
  }
}

//PAGEBREAK!
// Wake up all processes sleeping on chan.
// The ptable lock must be held.
static void
wakeup1(void *chan)
{
  struct proc *p;

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
    if(p->state == SLEEPING && p->chan == chan){
      p->state = RUNNABLE;
      /* insert process into PQueue */
      p->isStride = 0;
      insertIntoPQueue(p->prioritylevel , p);    
    }
}

// Wake up all processes sleeping on chan.
void
wakeup(void *chan)
{
  acquire(&ptable.lock);
  wakeup1(chan);
  release(&ptable.lock);
}

// Kill the process with the given pid.
// Process won't exit until it returns
// to user space (see trap in trap.c).
int
kill(int pid)
{
  struct proc *p;

  acquire(&ptable.lock);
  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->pid == pid){
      p->killed = 1;
      // Wake process from sleep if necessary.
      if(p->state == SLEEPING){
        p->state = RUNNABLE;
        /* insert process into PQueue */
        p->isStride = 0;
        insertIntoPQueue(p->prioritylevel , p);     
      }
      release(&ptable.lock);
      return 0;
    }
  }
  release(&ptable.lock);
  return -1;
}

//PAGEBREAK: 36
// Print a process listing to console.  For debugging.
// Runs when user types ^P on console.
// No lock to avoid wedging a stuck machine further.
void
procdump(void)
{
  static char *states[] = {
  [UNUSED]    "unused",
  [EMBRYO]    "embryo",
  [SLEEPING]  "sleep ",
  [RUNNABLE]  "runble",
  [RUNNING]   "run   ",
  [ZOMBIE]    "zombie"
  };
  int i;
  struct proc *p;
  char *state;
  uint pc[10];

  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
    if(p->state == UNUSED)
      continue;
    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
      state = states[p->state];
    else
      state = "???";
    cprintf("%d %s %s", p->pid, state, p->name);
    if(p->state == SLEEPING){
      getcallerpcs((uint*)p->context->ebp+2, pc);
      for(i=0; i<10 && pc[i] != 0; i++)
        cprintf(" %p", pc[i]);
    }
    cprintf("\n");
  }
}
/* return process information */
int getprocessinfo(struct pstat *pstats) {
    acquire(&ptable.lock);
    struct proc *p;
    int i = 0;
    for(p = ptable.proc ; p < &ptable.proc[NPROC] ; p++) {
        pstats->pid[i] = p->pid;
        if(p->state == UNUSED) {
            pstats->inuse[i] = 0;
        }else {
            pstats->inuse[i] = 1;
        }

        pstats->priority[i] = p->prioritylevel;
        pstats->state[i] = p->state;

        pstats->ticks[i][0] = p->ticks[0];
        pstats->ticks[i][1] = p->ticks[1];
        pstats->ticks[i][2] = p->ticks[2];
        i++;
    }
    release(&ptable.lock);
    return 0;
}
